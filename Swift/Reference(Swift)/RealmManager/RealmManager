import Foundation 
import RealmSwift

class RealmManager {
    private var realm: Realm
    static let sharedInstance = RealmManager()
    
    private init() {
        realm = try! Realm()
    }
    
    func defaultRealm() {
        guard let realm = try? Realm() else { return }
        print(realm.configuration.fileURL!)
    } // Realm 저장 위치 확인
    
    func create(object: Object, shouldUpdate: Bool = true){
        try! realm.write {
            if shouldUpdate {
                realm.add(object, update: .all)
            } else {
                realm.add(object)
            }
        }
    }
    
    func readData(object: Object, key: String) -> Object {
        let objectType = type(of: object)
        guard let readData = realm.object(ofType: objectType.self, forPrimaryKey: key) else {
            let errorObject = ErrorObject()
            return errorObject
        }
        return readData
    }
    
    func update(action: () -> Void) {
        try! realm.write {
            action()
        }
    }
    
    func deleteAll() {
        try! realm.write({
            realm.deleteAll()
        })
    }
    
    func deleteOneClass(object: Object) {
        let objectType = type(of: object)
        try! realm.write({
            realm.delete(realm.objects(objectType.self))
        })
    }
    
    func deleteThing(object: Object, name: String, key: String){
        let objectType = type(of: object)
        try! realm.write({
            let key = NSPredicate(format: "\(name) = %@", key)
            realm.delete(realm.objects(objectType.self).filter(key))
        })
    }
    
    func cleanDelete() {
        let realmURL = Realm.Configuration.defaultConfiguration.fileURL!
        let realmURLs = [
            realmURL,
            realmURL.appendingPathExtension("lock"),
            realmURL.appendingPathExtension("note"),
            realmURL.appendingPathExtension("management")]
        for URL in realmURLs {
            do {
                try FileManager.default.removeItem(at: URL)
            } catch {
//                handler ERROR
            }
        }
    }
    
}
